wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
geom_errorbar(aes(ymin=prop-se, ymax=prop+se))+
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_nn_puz <- results %>%
mutate(mate_count=as.factor(mate_count)) %>%
group_by(nn_status, winner_bool, mate_count) %>%
summarise(total = n()) %>%
group_by(mate_count) %>%
mutate(prop = total/sum(total),
se = sqrt((prop*(1-prop))/total))
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
#  geom_bar(stat='identity', position='dodge') +
geom_errorbar(aes(ymin=prop-se, ymax=prop+se))+
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
#  geom_bar(stat='identity', position='dodge') +
geom_errorbar(aes(ymin=prop-se, ymax=prop+se))+
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_nn_puz <- results %>%
mutate(mate_count=as.factor(mate_count)) %>%
group_by(nn_status, winner_bool, mate_count) %>%
summarise(total = n()) %>%
group_by(mate_count) %>%
mutate(prop = total/sum(total),
se = sqrt((prop*(1-prop))/total))
print('Wins by network status and puzzle:')
print(wins_by_nn_puz)
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop))
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop),
total = n())
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge')
print(wins_by_nn_puz)
wins_by_puzzle %>%
group_by(mate_count, winner_bool) %>%
ggplot(x=mate_count, y = prop, fill=winner_bool)
wins_by_puzzle %>%
group_by(mate_count, winner_bool) %>%
ggplot(x=mate_count, y = prop, fill=winner_bool) +
geom_bar(stat='identity', position = 'dodge')
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = n())
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(total))
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop),
total=sum(total))
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop),
total=sum(total),
se = sqrt((tot*(1-tot))/total)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
geom_errorbar(aes(ymin=tot-se, ymax=tot+se))+
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop),
total=sum(total),
se = sqrt((tot*(1-tot))/total)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
geom_errorbar(aes(ymin=tot-se, ymax=tot+se),position=position_dodge(.9))+
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop),
total=sum(total),
se = sqrt((tot*(1-tot))/total)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
geom_errorbar(aes(ymin=tot-se, ymax=tot+se),position=position_dodge(.9), width=0.2)+
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop),
total=sum(total),
se = sqrt((tot*(1-tot))/total)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
geom_errorbar(aes(ymin=tot-se, ymax=tot+se),position=position_dodge(.9), width=0.4)+
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity', position ='dodge') +
labs(x='Algorithm', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence', fill='Game Result')+
theme_minimal()
print(wis_by_nn)
wis_by_nn <- results %>%
group_by(nn_status, winner_bool) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total),
se = sqrt((prop*(1-prop))/total))
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity', position ='dodge') +
geom_errorbar(aes(ymin=prop-se, ymax=prop+se), position=position_dodge(.9), width=0.4)+
labs(x='Algorithm', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence', fill='Game Result')+
theme_minimal()
prop.test(table(results$nn_status, results$winner_bool))
mab_split <- results %>%
group_by(winner_bool, exp_alg) %>%
summarise(total = n()) %>%
group_by(exp_alg) %>%
mutate(prop = total/sum(total))
mab_split
table(results$exp_alg, results$winner_bool)
mab_split %>%
ggplot(aes(x = exp_alg, y = prop, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
geom_errorbar(aes(ymin=prop-se, ymax=prop+se),position=position_dodge(.9), width=0.4)+
labs(x='MAB Heuristic', y = 'Result Proportion', title='Result Proportions by MAB Heuristic', fill='Game Status')+
theme_minimal()
mab_split <- results %>%
group_by(winner_bool, exp_alg) %>%
summarise(total = n()) %>%
group_by(exp_alg) %>%
mutate(prop = total/sum(total),
se = sqrt((prop*(1-prop))/sqrt(total)))
mab_split %>%
ggplot(aes(x = exp_alg, y = prop, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
geom_errorbar(aes(ymin=prop-se, ymax=prop+se),position=position_dodge(.9), width=0.4)+
labs(x='MAB Heuristic', y = 'Result Proportion', title='Result Proportions by MAB Heuristic', fill='Game Status')+
theme_minimal()
adhoc_data <- data.frame(input = readLines('/home/tpin3694/Documents/python/AI_chess/results/UCB_wout_nn_600results.csv'))
adhoc_split <- data.frame(str_split_fixed(adhoc_data$input, ',', 8)) %>%
`colnames<-`(c('game', 'move_count','move_times', 'mate_count', 'starting_var', 'winner', 'simulation', 'exp_alg')) %>%
filter(row_number()!=1) %>%
select(-move_times, move_times) %>%
mutate(move_times = gsub('\\[|\\]', '', move_times))
cleaned <- data.frame(str_split_fixed(adhoc_split$move_times, '\\|', 50))
final <- cbind(subset(adhoc_split, select = -move_times), cleaned)
times <- melt(final, id.vars = c('game', 'move_count', 'mate_count', 'starting_var', 'winner', 'simulation', 'exp_alg')) %>%
mutate(value = as.numeric(value),
value = ifelse(is.na(value), 0, value),
expected = 2*(as.numeric(gsub('mate_in_', '', mate_count)))-1,
difference = as.numeric(as.character(move_count)) - expected)
write.csv(times, '/home/tpin3694/Documents/python/AI_chess/results/ucb_no_nn_600.csv', row.names = FALSE)
write.csv(times, '/home/tpin3694/Documents/python/AI_chess/results/times//ucb_no_nn_600.csv', row.names = FALSE)
write.csv(times, '/home/tpin3694/Documents/python/AI_chess/results/times/ucb_no_nn_600.csv', row.names = FALSE)
rm(list=ls())
directory = '/home/tpin3694/Documents/python/AI_chess/results/times//'
setwd(directory)
file_list = list.files()
file_list
rm(list=ls())
directory = '/home/tpin3694/Documents/python/AI_chess/results/times//'
setwd(directory)
file_list = list.files()
# Read in data
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'MCTS', 'MCTS-NN')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
results <- rbind(results, result_set)
}
View(results)
library(dplyr)
library(broom)
library(stringr)
library(reshape2)
library(ggplot2)
head(results)
cpu_lm <- lm(value ~ simulation + nn_status)
cpu_lm <- lm(value ~ simulation + nn_status, data = results)
cpu_lm
cpu_lm <- lm(value ~ simulation + as.factor(nn_status), data = results)
cpu_lm
summary(cpu_lm  )
results %>%
ggplot(aes(x=simulation, y=value, fill=nn_status)) +
geom_point() +
geom_smooth() +
theme_minimal()
results %>%
ggplot(aes(x=simulation, y=value, colour=nn_status)) +
geom_point() +
geom_smooth() +
theme_minimal()
results %>%
ggplot(aes(x=simulation, y=value, colour=nn_status)) +
geom_point(alpha=0.7) +
stat_smooth() +
theme_minimal()
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.7) +
stat_smooth() +
theme_minimal()
results <- results %>%
filter(value >0)
cpu_lm <- lm(value ~ simulation + as.factor(nn_status), data = results)
summary(cpu_lm  )
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.7) +
stat_smooth() +
theme_minimal()
results %>%
ggplot(aes(nn_status, value)) +
geom_boxplot()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin() +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin() +
labs(x='Algorithm', y = 'Simulation Time (s)', title='Distribution of Times split by Algortithm') +
theme_minimal()
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.7) +
stat_smooth() +
theme_minimal()
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.1) +
stat_smooth() +
labs(x='Jittered Simulation Value')
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.1) +
stat_smooth() +
labs(x='Jittered Simulation Value', y = 'Simulation Times (secs)', title='Simulation Count against Simulation Time Stratified by Algorithm') +
theme_minimal()
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.1) +
stat_smooth() +
labs(x='Jittered Simulation Value', y = 'Simulation Times (secs)', title='Simulation Count against Simulation Time Stratified by Algorithm', colour='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin() +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin() +
geom_point() +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin() +
geom_jitter(height = 0, width = 0.1) +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin() +
geom_jitter(height = 0, width = 0.1, alpha = 0.3) +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin() +
geom_jitter(height = 0, width = 0.1, alpha = 0.1) +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin() +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin(alpha = 0.8) +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin(alpha = 0.8, adjust=0.5) +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin(alpha = 0.8, adjust=1.5) +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
adhoc_data <- data.frame(input = readLines('/home/tpin3694/Documents/python/AI_chess/results/UCB_wout_nn_200results.csv'))
adhoc_data <- data.frame(input = readLines('/home/tpin3694/Documents/python/AI_chess/results/UCB_wout_nn_200results.csv'))
adhoc_split <- data.frame(str_split_fixed(adhoc_data$input, ',', 8)) %>%
`colnames<-`(c('game', 'move_count','move_times', 'mate_count', 'starting_var', 'winner', 'simulation', 'exp_alg')) %>%
filter(row_number()!=1) %>%
select(-move_times, move_times) %>%
mutate(move_times = gsub('\\[|\\]', '', move_times))
cleaned <- data.frame(str_split_fixed(adhoc_split$move_times, '\\|', 50))
final <- cbind(subset(adhoc_split, select = -move_times), cleaned)
times <- melt(final, id.vars = c('game', 'move_count', 'mate_count', 'starting_var', 'winner', 'simulation', 'exp_alg')) %>%
mutate(value = as.numeric(value),
value = ifelse(is.na(value), 0, value),
expected = 2*(as.numeric(gsub('mate_in_', '', mate_count)))-1,
difference = as.numeric(as.character(move_count)) - expected)
write.csv(times, '/home/tpin3694/Documents/python/AI_chess/results/times/ucb_no_nn_200.csv', row.names = FALSE)
rm(list=ls())
directory = '/home/tpin3694/Documents/python/AI_chess/results/times//'
setwd(directory)
file_list = list.files()
# Read in data
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'MCTS', 'MCTS-NN')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
results <- rbind(results, result_set)
}
results <- results %>%
filter(value >0)
cpu_lm <- lm(value ~ simulation + as.factor(nn_status), data = results)
summary(cpu_lm  )
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.1) +
stat_smooth() +
labs(x='Jittered Simulation Value', y = 'Simulation Times (secs)', title='Simulation Count against Simulation Time Stratified by Algorithm', colour='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin(alpha = 0.8, adjust=1.5) +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
nn_results <- results %>%
filter(nn_status='MCTS-NN')
nn_results <- results %>%
filter(nn_status=='MCTS-NN')
no_nn_results <- results %>%
filter(nn_status=='MCTS')
nn_lm <- lm(value ~ simulation, data = nn_results)
no_nn_lm <- lm(value ~ simulation, data = no_nn_results)
summary(nn_lm)
summary(no_nn_lm)
nn_lm_poly <- lm(value ~ poly(simulation, degree = 2), data = nn_results)
no_nn_lm <- lm(value ~ poly(simulation, degree=2), data = no_nn_results)
summary(no_nn_lm_poly)
nn_lm_poly <- lm(value ~ poly(simulation, degree = 2), data = nn_results)
no_nn_lm_poly <- lm(value ~ poly(simulation, degree=2), data = no_nn_results)
summary(nn_lm_poly)
summary(no_nn_lm_poly)
abline(nn_lm)
plot.new()
abline(nn_lm)
summary(nn_lm)
nn_lm <- lm(value ~ simulation, data = nn_results)
summary(nn_lm)
nn_lm <- lm(value ~ 0 + simulation, data = nn_results)
no_nn_lm <- lm(value ~ 0 + simulation, data = no_nn_results)
summary(cpu_lm  )
summary(nn_lm)
nn_lm_poly <- lm(value ~ 0 + poly(simulation, degree = 2), data = nn_results)
no_nn_lm_poly <- lm(value ~ 0 + poly(simulation, degree=2), data = no_nn_results)
summary(nn_lm_poly)
adhoc_data <- data.frame(input = readLines('/home/tpin3694/Documents/python/AI_chess/results/UCB_wout_nn_400results.csv'))
adhoc_split <- data.frame(str_split_fixed(adhoc_data$input, ',', 8)) %>%
`colnames<-`(c('game', 'move_count','move_times', 'mate_count', 'starting_var', 'winner', 'simulation', 'exp_alg')) %>%
filter(row_number()!=1) %>%
select(-move_times, move_times) %>%
mutate(move_times = gsub('\\[|\\]', '', move_times))
cleaned <- data.frame(str_split_fixed(adhoc_split$move_times, '\\|', 50))
final <- cbind(subset(adhoc_split, select = -move_times), cleaned)
times <- melt(final, id.vars = c('game', 'move_count', 'mate_count', 'starting_var', 'winner', 'simulation', 'exp_alg')) %>%
mutate(value = as.numeric(value),
value = ifelse(is.na(value), 0, value),
expected = 2*(as.numeric(gsub('mate_in_', '', mate_count)))-1,
difference = as.numeric(as.character(move_count)) - expected)
write.csv(times, '/home/tpin3694/Documents/python/AI_chess/results/times/ucb_no_nn_400.csv', row.names = FALSE)
rm(list=ls())
directory = '/home/tpin3694/Documents/python/AI_chess/results/times//'
setwd(directory)
file_list = list.files()
# Read in data
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'MCTS', 'MCTS-NN')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
results <- rbind(results, result_set)
}
results <- results %>%
filter(value >0)
nn_results <- results %>%
filter(nn_status=='MCTS-NN')
no_nn_results <- results %>%
filter(nn_status=='MCTS')
cpu_lm <- lm(value ~ simulation + as.factor(nn_status), data = results)
nn_lm <- lm(value ~ 0 + simulation, data = nn_results)
no_nn_lm <- lm(value ~ 0 + simulation, data = no_nn_results)
summary(cpu_lm  )
summary(nn_lm)
summary(no_nn_lm)
nn_lm_poly <- lm(value ~ 0 + poly(simulation, degree = 2), data = nn_results)
no_nn_lm_poly <- lm(value ~ 0 + poly(simulation, degree=2), data = no_nn_results)
summary(nn_lm_poly)
summary(no_nn_lm_poly)
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.1) +
stat_smooth() +
labs(x='Jittered Simulation Value', y = 'Simulation Times (secs)', title='Simulation Count against Simulation Time Stratified by Algorithm', colour='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.1) +
stat_smooth() +
labs(x='Jittered Simulation Value', y = 'Simulation Times (secs)', title='Simulation Count against Simulation Time Stratified by Algorithm', colour='Algorithm') +
theme_minimal()
source('~/Documents/python/AI_chess/results/times.R')
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.1) +
stat_smooth() +
labs(x='Jittered Simulation Value', y = 'Simulation Times (secs)', title='Simulation Count against Simulation Time Stratified by Algorithm', colour='Algorithm') +
theme_minimal()
View(results)
dev.off()
library(dplyr)
library(broom)
library(stringr)
library(reshape2)
library(ggplot2)
rm(list=ls())
directory = '/home/tpin3694/Documents/python/AI_chess/results/times//'
setwd(directory)
file_list = list.files()
# Read in data
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'MCTS', 'MCTS-NN')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
results <- rbind(results, result_set)
}
results <- results %>%
filter(value >0)
nn_results <- results %>%
filter(nn_status=='MCTS-NN')
no_nn_results <- results %>%
filter(nn_status=='MCTS')
cpu_lm <- lm(value ~ simulation + as.factor(nn_status), data = results)
nn_lm <- lm(value ~ 0 + simulation, data = nn_results)
no_nn_lm <- lm(value ~ 0 + simulation, data = no_nn_results)
summary(cpu_lm  )
summary(nn_lm)
summary(no_nn_lm)
nn_lm_poly <- lm(value ~ 0 + poly(simulation, degree = 2), data = nn_results)
no_nn_lm_poly <- lm(value ~ 0 + poly(simulation, degree=2), data = no_nn_results)
summary(nn_lm_poly)
summary(no_nn_lm_poly)
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.1) +
stat_smooth() +
labs(x='Jittered Simulation Value', y = 'Simulation Times (secs)', title='Simulation Count against Simulation Time Stratified by Algorithm', colour='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(nn_status, value, fill=nn_status)) +
geom_violin(alpha = 0.8, adjust=1.5) +
labs(x='Algorithm', y = 'Simulation Time (secs)', title='Distribution of Times split by Algortithm', fill='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.3) +
stat_smooth() +
labs(x='Jittered Simulation Value', y = 'Simulation Times (secs)', title='Simulation Count against Simulation Time Stratified by Algorithm', colour='Algorithm') +
theme_minimal()
results %>%
ggplot(aes(x=jitter(simulation), y=value, colour=nn_status)) +
geom_point(alpha=0.5) +
stat_smooth() +
labs(x='Jittered Simulation Value', y = 'Simulation Times (secs)', title='Simulation Count against Simulation Time Stratified by Algorithm', colour='Algorithm') +
theme_minimal()
summary(nn_lm)
summary(nn_lm_poly)
summary(no_nn_lm)
summary(nn_lm_poly)
summary(no_nn_lm_poly)
summary(cpu_lm  )
cpu_lm <- lm(value ~ 0 + simulation + as.factor(nn_status), data = results)
summary(cpu_lm  )
cpu_lm_poly <- lm(value ~ 0 + simulation + poly(as.factor(nn_status),2), data = results)
cpu_lm_poly <- lm(value ~ 0 + simulation + as.factor(nn_status), data = results)
