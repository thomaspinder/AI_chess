setwd(directory)
file_list = list.files()
# Read in data
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'Present', 'Absent')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
print(head(result_set))
print(head(results))
results <- rbind(results, result_set)
}
directory = '/home/tpin3694/Documents/python/AI_chess/results/clean'
setwd(directory)
file_list = list.files()
# Read in data
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'Present', 'Absent')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
print(head(result_set))
print(head(results))
results <- rbind(results, result_set)
}
source('~/Documents/python/AI_chess/results/analysis/analysis.R')
adhoc_data <- data.frame(input = readLines('Documents/python/AI_chess/results/UCB_with_nn_results.csv'))
adhoc_data <- data.frame(input = readLines('/home/tpin3694/Documents/python/AI_chess/results/UCB_with_nn_results.csv'))
adhoc_split <- data.frame(str_split_fixed(adhoc_data$input, ',', 8)) %>%
`colnames<-`(c('game', 'move_count','move_times', 'mate_count', 'starting_var', 'winner', 'simulation', 'exp_alg')) %>%
filter(row_number()!=1) %>%
select(-move_times, move_times) %>%
mutate(move_times = gsub('\\[|\\]', '', move_times))
cleaned <- data.frame(str_split_fixed(adhoc_split$move_times, '\\|', 50))
final <- cbind(subset(adhoc_split, select = -move_times), cleaned)
View(final)
times <- melt(final, id.vars = c('game', 'move_count', 'mate_count', 'starting_var', 'winner', 'simulation', 'exp_alg')) %>%
mutate(value = as.numeric(value),
value = ifelse(is.na(value), 0, value),
expected = 2*(as.numeric(gsub('mate_in_', '', mate_count)))-1,
difference = as.numeric(as.character(move_count)) - expected)
write.csv(times, 'Documents/python/AI_chess/results/clean/ucb_nn.csv', row.names = FALSE)
write.csv(times, '/home/tpin3694/Documents/python/AI_chess/results/clean/ucb_nn.csv', row.names = FALSE)
source('~/Documents/python/AI_chess/results/analysis/analysis.R')
wins_by_nn_puz %>%
group_by(winner, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner)) +
geom_bar(stat='identity', position = 'dodge') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle') +
theme_minimal()
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence')+
theme_minimal()
print(head(results))
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'Present', 'Absent')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
results <- rbind(results, result_set)
}
print(head(results))
times <- results %>%
filter(value > 0)
results <- results %>%
filter(value > 0) %>%
select(-value) %>%
unique()
print(head(results))
number_of_wins <- results %>%
filter(winner == 'White') %>%
nrow()*100/nrow(results)
print(paste('Percentage of overall wins: ',number_of_wins, sep=''))
number_of_wins <- results %>%
group_by(winner) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
print(number_of_wins)
nn_times <- times %>%
group_by(nn_status) %>%
summarise(mean = mean(value), var = var(value))
View(nn_times)
nn_times <- times %>%
group_by(nn_status) %>%
summarise(mean = mean(value), var = var(value), n=n())
View(nn_times)
directory = '/home/tpin3694/Documents/python/AI_chess/results/clean'
setwd(directory)
file_list = list.files()
# Read in data
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'Absent', 'Present')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
results <- rbind(results, result_set)
}
times <- results %>%
filter(value > 0)
nn_times <- times %>%
group_by(nn_status) %>%
summarise(mean = mean(value), var = var(value), n=n())
results <- results %>%
filter(value > 0) %>%
select(-value) %>%
unique()
print(head(results))
# Proportion of puzzles solved
number_of_wins <- results %>%
filter(winner == 'White') %>%
nrow()*100/nrow(results)
number_of_wins <- results %>%
group_by(winner) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
print('Percentage of overall wins')
print(number_of_wins)
wins_by_puzzle <- results %>%
group_by(mate_count, winner) %>%
summarise(total = n())
print('Wins By Puzzle:')
print(wins_by_puzzle)
wis_by_nn <- results %>%
group_by(nn_status, winner) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
print('Wins by network status:')
print(wis_by_nn)
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence')+
theme_minimal()
wins_by_nn_puz <- results %>%
mutate(mate_count=as.factor(mate_count)) %>%
group_by(nn_status, winner, mate_count) %>%
summarise(total = n()) %>%
group_by(mate_count) %>%
mutate(prop = total/sum(total))
print('Wins by network status and puzzle:')
print(wins_by_nn_puz)
wins_by_nn_puz %>%
group_by(winner, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner)) +
geom_bar(stat='identity', position = 'dodge') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle') +
theme_minimal()
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence')+
theme_minimal()
nn_times <- times %>%
group_by(nn_status) %>%
summarise(mean = mean(value), var = var(value), n=n())
View(nn_times)
View(results)
View(times)
test_stat <- nn_times$mean[1]-nn_times$mean[2]
test_stat <- (nn_times$mean[1]-nn_times$mean[2])/sqrt((nn_times$var[1]/nn_times$n[1])+(nn_times$var[2]/nn_times$n[2]))
serror <- ((nn_times$n[1]-1)*nn_times$var[1])+((nn_times$n[2]-1)*nn_times$var[2])/(sum(nn_times$n)-2)
test_stat <- (nn_times$mean[1]-nn_times$mean[2])/(serror*sqrt((1/nn_times[1])+1/nn_times[2]))
(nn_times$mean[1]-nn_times$mean[2])
(serror*sqrt((1/nn_times[1])+1/nn_times[2]))
test_stat <- (nn_times$mean[1]-nn_times$mean[2])/(serror*sqrt(1/nn_times[1]+1/nn_times[2]))
1/nn_times[1]
test_stat <- (nn_times$mean[1]-nn_times$mean[2])/(serror*sqrt(1/nn_times$n[1]+1/nn_times$n[2])
test_stat <- (nn_times$mean[1]-nn_times$mean[2])/(serror*sqrt(1/nn_times$n[1]+1/nn_times$n[2]))
qt(test_stat)
qt(test_stat, df = sum(nn_times$n-2))
?qt
pt(test_stat, df = sum(nn_times$n-2))
nn_times_w <- nn_times %>%
filter(nn_status=='Present') %>%
select(value)
nn_times_w <- nn_times %>%
filter(nn_status=='Present')
View(number_of_wins)
nn_times_w <- times %>%
filter(nn_status=='Present') %>%
select(value)
View(nn_times_w)
nn_times_wout <- times %>%
filter(nn_status!='Present') %>%
select(value)
View(nn_times)
t.test(nn_times_w, nn_times_wout, var.equal = FALSE)
results <- results %>%
filter(value > 0) %>%
mutate(winner = ifelse(winner=='White', 'Win', 'Draw')) %>%
select(-value) %>%
unique()
# Read in data
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'Absent', 'Present')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
results <- rbind(results, result_set)
}
times <- results %>%
filter(value > 0)
nn_times <- times %>%
group_by(nn_status) %>%
summarise(mean = mean(value), var = var(value), n=n())
nn_times_w <- times %>%
filter(nn_status=='Present') %>%
select(value)
nn_times_wout <- times %>%
filter(nn_status!='Present') %>%
select(value)
t.test(nn_times_w, nn_times_wout, var.equal = FALSE)
results <- results %>%
filter(value > 0) %>%
mutate(winner_bool = ifelse(winner=='White', 'Win', 'Draw')) %>%
select(-value) %>%
unique()
# Read in data
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'Absent', 'Present')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
results <- rbind(results, result_set)
}
times <- results %>%
filter(value > 0)
nn_times <- times %>%
group_by(nn_status) %>%
summarise(mean = mean(value), var = var(value), n=n())
nn_times_w <- times %>%
filter(nn_status=='Present') %>%
select(value)
nn_times_wout <- times %>%
filter(nn_status!='Present') %>%
select(value)
t.test(nn_times_w, nn_times_wout, var.equal = FALSE)
results <- results %>%
filter(value > 0) %>%
mutate(winner_bool = ifelse(winner=='White', 'Win', 'Draw')) %>%
select(-value) %>%
unique()
print(head(results))
# Proportion of puzzles solved
number_of_wins <- results %>%
filter(winner == 'White') %>%
nrow()*100/nrow(results)
number_of_wins <- results %>%
group_by(winner) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
print('Percentage of overall wins')
print(number_of_wins)
wins_by_puzzle <- results %>%
group_by(mate_count, winner_bool) %>%
summarise(total = n())
print('Wins By Puzzle:')
print(wins_by_puzzle)
wis_by_nn <- results %>%
group_by(nn_status, winner_bool) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
print('Wins by network status:')
print(wis_by_nn)
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence')+
theme_minimal()
wins_by_nn_puz <- results %>%
mutate(mate_count=as.factor(mate_count)) %>%
group_by(nn_status, winner_bool, mate_count) %>%
summarise(total = n()) %>%
group_by(mate_count) %>%
mutate(prop = total/sum(total))
print('Wins by network status and puzzle:')
print(wins_by_nn_puz)
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position = 'dodge') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle') +
theme_minimal()
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence')+
theme_minimal()
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence')+
theme_minimal()
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence')+
theme_minimal()
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence', fill='Game Result')+
theme_minimal()
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle'
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position = 'dodge') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle')+
theme_minimal()
wins_by_nn_puz <- results %>%
mutate(mate_count=as.factor(mate_count)) %>%
group_by(nn_status, winner_bool, mate_count) %>%
summarise(total = n()) %>%
group_by(mate_count) %>%
mutate(prop = total/sum(total))
print('Wins by network status and puzzle:')
print(wins_by_nn_puz)
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position = 'dodge') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle')+
theme_minimal()
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle')+
theme_minimal()
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_nn_puz
table(wins_by_nn_puz$nn_status, wins_by_nn_puz$winner_bool)
table(results$nn_status, results$winner_bool)
prop.test(table(results$nn_status, results$winner_bool))
(1104+510)/nrow(results)
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence', fill='Game Result')+
theme_minimal()
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_nn_puz
View(wins_by_puzzle)
wins_by_puzzle
wins_by_puzzle <- results %>%
group_by(mate_count, winner_bool) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
print('Wins By Puzzle:')
print(wins_by_puzzle)
results$mate_count <- factor(results$mate_count, levels = c('mate_in_1', 'mate_in_2', 'mate_in_3', 'mate_in_4', 'mate_in_5'))
# Read in data
results <- data.frame()
for (file in file_list){
to_append <- ifelse(grepl('no_nn', file), 'Absent', 'Present')
result_set <- read.csv(paste(directory, '/', file, sep = ''))
result_set$nn_status <- to_append
results <- rbind(results, result_set)
}
results$mate_count <- factor(results$mate_count, levels = c('mate_in_1', 'mate_in_2', 'mate_in_3', 'mate_in_4', 'mate_in_5'))
times <- results %>%
filter(value > 0)
nn_times <- times %>%
group_by(nn_status) %>%
summarise(mean = mean(value), var = var(value), n=n())
nn_times_w <- times %>%
filter(nn_status=='Present') %>%
select(value)
nn_times_wout <- times %>%
filter(nn_status!='Present') %>%
select(value)
t.test(nn_times_w, nn_times_wout, var.equal = FALSE)
results <- results %>%
filter(value > 0) %>%
mutate(winner_bool = ifelse(winner=='White', 'Win', 'Draw')) %>%
select(-value) %>%
unique()
print(head(results))
# Proportion of puzzles solved
number_of_wins <- results %>%
filter(winner == 'White') %>%
nrow()*100/nrow(results)
number_of_wins <- results %>%
group_by(winner) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
print('Percentage of overall wins')
print(number_of_wins)
wins_by_puzzle <- results %>%
group_by(mate_count, winner_bool) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
print('Wins By Puzzle:')
print(wins_by_puzzle)
wis_by_nn <- results %>%
group_by(nn_status, winner_bool) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
print('Wins by network status:')
print(wis_by_nn)
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence', fill='Game Result')+
theme_minimal()
wins_by_nn_puz <- results %>%
mutate(mate_count=as.factor(mate_count)) %>%
group_by(nn_status, winner_bool, mate_count) %>%
summarise(total = n()) %>%
group_by(mate_count) %>%
mutate(prop = total/sum(total))
print('Wins by network status and puzzle:')
print(wins_by_nn_puz)
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_puzzle
prop.test(table(results$nn_status, results$winner_bool))
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence', fill='Game Result')+
theme_minimal()
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wins_by_nn_puz %>%
group_by(winner_bool, mate_count) %>%
summarise(tot = sum(prop)) %>%
ggplot(aes(x = mate_count, y = tot, fill=winner_bool)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Checkmate Puzzle', y = 'Result Proportion', title='Result Proportions by Mate Puzzle', fill='Game Status')+
theme_minimal()
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence', fill='Game Result')+
theme_minimal()
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity', position ='dodge') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence', fill='Game Result')+
theme_minimal()
source('~/Documents/python/AI_chess/results/analysis/analysis.R')
source('~/Documents/python/AI_chess/results/analysis/analysis.R')
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity', position ='dodge') +
labs(x='Neural Network Status', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence', fill='Game Result')+
theme_minimal()
wis_by_nn %>%
ggplot(aes(x = nn_status, y = prop, fill=winner_bool)) +
geom_bar(stat='identity', position ='dodge') +
labs(x='Algorithm', y = 'Result Proportion', title = 'Result Proportions by Neural Network Presence', fill='Game Result')+
theme_minimal()
print(wis_by_nn)
prop.test(table(results$nn_status, results$winner_bool))
View(results)
mab_spplit <- results %>%
group_by(winner_bool, exp_alg)
mab_spplit <- results %>%
group_by(winner_bool, exp_alg) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
mab_split <- results %>%
group_by(winner_bool, exp_alg) %>%
summarise(total = n()) %>%
mutate(prop = total/sum(total))
mab_split
mab_split <- results %>%
group_by(winner_bool, exp_alg) %>%
summarise(total = n()) %>%
group_by(exp_alg) %>%
mutate(prop = total/sum(total))
mab_split
table(results$exp_alg, results$winner_bool)
